# This configuration file configures bare usable minimum. Some options are
# commented out to show default values.
#
# There are some options that can be set only from the command line. See init
# script (i.e. /etc/init.d/vts-backend-mapproxy) for details.
#
# Full configuration information can be obtained by running mapproxy with either
# --help (help for only command line options) or --help-all (help for both
# command line and config file options).
#
# All configuration file options can be set from command line. There can be even
# more than one config file. Only the first occurence of configuration option is
# used, i.e. options specified on the command line overrides any other occurence
# in the config file. Likewise, configuration option occurence in a
# configuration file overrides any other occurence in subsequent configuration
# files.

# logging setup
[log]
# log mask
mask = VERBOSE

# path to file to log to
file = /var/log/vts/mapproxy.log

# Daemon settings. Allows us to run under different user than the one that
# starter program. Original user must have privileges to switch process persona
# (i.e. change to different user/group) which boils down to root (system
# administrator) in almost all practical situations.
# Comment out if running manually.
[service]
# name of system user to run under
user = vts
# name of system group to run under
group = vts


# mapproxy internal storage
[store]
# path to store; created by mapproxy if missing
path = /var/vts/mapproxy/store


# HTTP server configuration
[http]
# enables built-in VTS browser and directory-like resource browsing
enableBrowser = true

## TCP endpoint where to listen at. Format: IP:port, :port, port
# listen = 3070

## Number of HTTP processing threads, defaults to hardware concurrency, i.e. the
## number of available processor
# threadCount = <number of CPUs>


# resource backend configuration, ie. where is the resource info comming from
[resource-backend]
# root of all relative paths in resource configuration
root = /var/vts/mapproxy/datasets

## Time between resource information update (in seconds)
# updatePeriod = 300

# which resource backend to use; we use JSON-config-file-based one
type = conffile
# [type-dependent] path to resource config file (JSON)
path = /etc/vts/mapproxy/resources.json


# GDAL configuration
#
# For practical reasons all GDAL operations (on both raster and vector datasets)
# are performed in separate processes. This enables us to cache open datasets in
# straightforward manner. Total (real) memory consumed by such processes is
# limited by configuration. When the memory limit is exceeded the most memory
# consuming processes are asked to terminate.
#
# This setups also helps us to fight with buggy GDAL drivers. Any error that
# would otherwise cause whole mapproxy termination is isolated to one helper
# process.
#
# Mapproxy maintains configured number of processes and any terminated one is
# replaced with fresh process.
[gdal]
# path where GDAL can store its data, e.g. cache for WMS/WMTS drivers
tmpRoot = /var/vts/mapproxy/gdaltmp

## number of processes that handle GDAL operations; defaults to available
## hardware concurrency
# processCount = <number of CPUs>

## Total amount of real memory (RAM) and swap space the GDAL processed are in
## total allowed to consume, in MiB (1024 * 1024 bytes)
# rssLimit = 4096

## Period of memory occupation check.
#rssCheckPeriod = 5


[vts]
## URL to built-in VTS browser; default uses latest VTS browser from Melown's
## CDN.
# builtinBrowserUrl = <compiled in default>


# HTTP Cache-Cache header configuration for different file classes. File age in
# seconds.
#     value >= 0 -> Cache-Control: max-age=value
#     value < 0  -> Cache-Control: no-cache
[max-age]
## Class for variousconfiguration files, like boundlayer.json, freelayer.json,
## mapConfig.json. Defaults to one minute.
# config arg = 60

## Class for support files, like internal VTS browser index.html for surfaces,
## leaflet.js-based browser for bound layers, surface debugger
## (debugger.html). Defaults to one hour.
# support = 3600

## Class for files provided by registry (geoid grids so far). Defaults to one
## hour.
# registry arg = 3600

## Class for all data files (images, meshes, ...). Defaults to one week.
# data = 604800

# Internal mapproxy machinery setup.
[core]
## Number of threads mapproxy does work in. For practical purposes this should
## be at least the same as the number of GDAL processes otherwise GDAL processes
## are underutilized. Defaults to available hardware concurrency.
# core.threadCount = <number of CPUs>
