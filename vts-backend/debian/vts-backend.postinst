#!/bin/bash
# postinst script for vts-backend
#
# see: dh_installdeb(1)

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

USER=vts
HOME=/var/vts
HOME_DIRS="mapproxy mapproxy/datasets store store/map-config store/stylesheet"
OTHER_DIRS_RECURSIVE="/etc/vts/"
STORAGE_BASE="${HOME}/store/stage"
NGINX=/etc/init.d/nginx

NGINX_ENABLED=/etc/nginx/sites-enabled/vts-backend
NGINX_AVAILABLE=../sites-available/vts-backend

# creates user vts and group vts
create_user() {
    if ! getent group ${USER} >/dev/null; then
        # Adding system group: vts.
        addgroup --system ${USER} >/dev/null
    fi

    if ! getent passwd ${USER} >/dev/null; then
        # Adding system user: vts.
        adduser \
            --ingroup ${USER} \
            --no-create-home \
            --disabled-password \
            --home "${HOME}" \
            --gecos "VTS user" \
            --shell /bin/bash \
            ${USER} >/dev/null
    fi
}

function change_overship() {
    for dir in ${HOME_DIRS}; do
        chown ${USER}:${USER} "${HOME}/${dir}"
    done

    for dir in ${OTHER_DIRS_RECURSIVE}; do
        chown -R ${USER}:${USER} "${dir}"
    done
}

function create_storage() {
    RF="$1"
    STORAGE="$2"
    TMP="${STORAGE}.tmp"

    if test -a "${STORAGE}"; then return 0; fi

    function cleanup() {
        test -a "${TMP}" && rm -R "${TMP}"
    }

    trap cleanup EXIT
    cleanup

    # create VTS storages for all available reference frames under vts user.
    echo "Creating VTS storage ${STORAGE} for reference frame ${RF}." >/dev/stderr
    su -c "/opt/vts/bin/vts ${TMP} --create --referenceFrame ${RF}" ${USER} || return

    mv "${TMP}" "${STORAGE}"
    trap - EXIT

    return 0
}

function create_storages() {
    /opt/vts/bin/vts . --list-reference-frames | while read rf; do
        create_storage "${rf}" "${STORAGE_BASE}.${rf}" || return
    done
}

function create_symlinks() {
    # enable nginx host
    if [ ! -a "${NGINX_ENABLED}" ]; then
        ln -s -T "${NGINX_AVAILABLE}" "${NGINX_ENABLED}"
    fi
}

function reload_nginx() {
    # start or reload nginx
    ${NGINX} status >/dev/null && ${NGINX} reload || ${NGINX} start
}

case "$1" in
    configure)
        create_user
        change_overship
        create_storages || exit
        create_symlinks || exit
        reload_nginx
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
